# final version spider, we call the spider by the name on line 6 not class name
from scrapy import Spider
from scrapy.http import Request
from imdbproject.items import ImdbprojectItem
import re

class ImdbSpider(Spider):
	name = 'imdbspider'
	allowed_urls = ['www.imdb.com'] # changed from allowed_"domains"
	start_urls = ['https://www.imdb.com/list/ls068082370/?sort=list_order,asc&st_dt=&mode=detail&page=1']
	# //*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]
	# print('abc','*'*50)
	
	def parse(self, response):
		# print('got here')
		page_urls = ['https://www.imdb.com/list/ls068082370/?sort=list_order,asc&st_dt=&mode=detail&page=1',
					'https://www.imdb.com/list/ls068082370/?sort=list_order,asc&st_dt=&mode=detail&page=2',
					'https://www.imdb.com/list/ls068082370/?sort=list_order,asc&st_dt=&mode=detail&page=3']
		for url in page_urls:
			# print(url)
			yield Request(url=url, callback=self.parse_result_page)


	def parse_result_page(self, response):
		for movie in response.css('div.lister-item-content'):
			title = movie.css('a::text').get()
			id = movie.css('a::attr(href)').get().split('/title/')[1].split('/')[0]
			rating = movie.css('span.ipl-rating-star__rating::text').get()
			year = movie.css('span.lister-item-year::text').get()
			mins = movie.css('span.runtime::text').get()
			score = movie.css('span.runtime::text').get()
			genre = movie.css('span.genre::text').get()
			item = ImdbprojectItem()
			item['title'] = title.strip()
			item['score'] = score
			item['year'] = year
			item['mins'] = mins
			item['rating'] = rating
			item['genre'] = genre.strip()
			item['id'] = id
			item['gross'] = re.findall('\$\d+.\d\d[A-Z]', movie.extract())
			yield item
		# title = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/h3/a/text()').extract_first()
		# score = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/div[1]/div[1]/span[2]/text()').extract_first()
		# year = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/h3/span[2]/text()').extract_first()
		# mins = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[2]/div[2]/p[1]/span[3]/text()').extract_first()
		# rating = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/p[1]/span[1]/text()').extract_first()
		# genre = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/p[1]/span[5]/text()').extract_first().strip()
		# gross = response.xpath('//*[@id="main"]/div/div[4]/div[3]/div[1]/div[2]/p[4]/span[5]/text()').extract_first()
		
		# connecting the ImdbprojectItem (and items) from items.py here
		# Initialize a new ImdbprojectItem instance for each movie

		
# explanation from top down:	
# basically, we import spider and the class ImdbprojectItem created from autogenerated items.py
# next, we changed out allowed_domains and start_urls
# in parse, we want to make a function to read in the urls, my case I have 3 because 100 displayed in pages 1,2 and 50 on 3
# for url.... is a for loop to connect with 'parse_result_page' to go through the pages
# notice that a lot is just repetitive  

# Question: how do I get the xpath? simple. 
# 1st right click on the thing you want to inspect
# 2nd: go to the left of it right click 'copy' > copy xpath
# 3rd: make sure you go back to terminal (really it's scrapy shell) to test it out then copy and paste it (use .extract_first())
# 4rd: go back to the variable you care about related to the link aka the thing you're scraping

# 5th paste it
# 6th: at the end of the link, put a slash '/' then put .text() (still inside  in the quotes)
# 7th: put '.extract_first()' outside the quotes; at the end
# bam.

	